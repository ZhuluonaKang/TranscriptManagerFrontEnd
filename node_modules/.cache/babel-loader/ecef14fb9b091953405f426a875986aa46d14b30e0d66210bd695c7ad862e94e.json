{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\76064\\\\transcript-manager\\\\src\\\\pages\\\\UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadPage() {\n  _s();\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const maxFileSize = 5 * 1024 * 1024;\n  const maxFileCount = 100;\n  const handleFileUpload = event => {\n    const files = Array.from(event.target.files);\n    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];\n    if (files.length > maxFileCount) {\n      setUploadStatus(`Error: You can upload up to ${maxFileCount} files at a time.`);\n      return;\n    }\n    const invalidFiles = files.filter(file => !allowedTypes.includes(file.type) || file.size > maxFileSize);\n    if (invalidFiles.length > 0) {\n      const errors = invalidFiles.map(file => {\n        if (!allowedTypes.includes(file.type)) {\n          return `${file.name} has an unsupported format.`;\n        }\n        if (file.size > maxFileSize) {\n          return `${file.name} exceeds the maximum size of 5MB.`;\n        }\n        return null;\n      });\n      setUploadStatus(`Error:\\n${errors.join('\\n')}`);\n      return;\n    }\n    setUploadedFiles(files);\n    setUploadStatus('Upload successful!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Transcripts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [\"Allowed formats: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"PDF, JPG, PNG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 34\n      }, this), \" | Maximum size: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"5MB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 81\n      }, this), \" | Max files: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      accept: \".pdf, .jpg, .jpeg, .png\",\n      multiple: true,\n      onChange: handleFileUpload,\n      style: {\n        padding: '10px 20px',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: uploadStatus.startsWith('Error') ? 'red' : 'green',\n        whiteSpace: 'pre-line'\n      },\n      children: uploadStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), uploadedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        textAlign: 'left',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Uploaded Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: uploadedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, \" (\", (file.size / 1024).toFixed(2), \" KB)\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadPage, \"7TpUSh0aJpzZM3GPiTXT0u8Cv/k=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadPage","_s","uploadStatus","setUploadStatus","uploadedFiles","setUploadedFiles","maxFileSize","maxFileCount","handleFileUpload","event","files","Array","from","target","allowedTypes","length","invalidFiles","filter","file","includes","type","size","errors","map","name","join","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","id","accept","multiple","onChange","color","startsWith","whiteSpace","marginTop","display","index","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/76064/transcript-manager/src/pages/UploadPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction UploadPage() {\r\n    const [uploadStatus, setUploadStatus] = useState(''); \r\n    const [uploadedFiles, setUploadedFiles] = useState([]); \r\n    const maxFileSize = 5 * 1024 * 1024; \r\n    const maxFileCount = 100; \r\n\r\n    \r\n    const handleFileUpload = (event) => {\r\n        const files = Array.from(event.target.files); \r\n        const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];\r\n\r\n        \r\n        if (files.length > maxFileCount) {\r\n            setUploadStatus(`Error: You can upload up to ${maxFileCount} files at a time.`);\r\n            return;\r\n        }\r\n\r\n        \r\n        const invalidFiles = files.filter(\r\n            (file) => !allowedTypes.includes(file.type) || file.size > maxFileSize\r\n        );\r\n        if (invalidFiles.length > 0) {\r\n            const errors = invalidFiles.map((file) => {\r\n                if (!allowedTypes.includes(file.type)) {\r\n                    return `${file.name} has an unsupported format.`;\r\n                }\r\n                if (file.size > maxFileSize) {\r\n                    return `${file.name} exceeds the maximum size of 5MB.`;\r\n                }\r\n                return null;\r\n            });\r\n            setUploadStatus(`Error:\\n${errors.join('\\n')}`);\r\n            return;\r\n        }\r\n\r\n        \r\n        setUploadedFiles(files);\r\n        setUploadStatus('Upload successful!');\r\n    };\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n            <h1>Upload Transcripts</h1>\r\n            <p style={{ marginBottom: '10px' }}>\r\n                Allowed formats: <strong>PDF, JPG, PNG</strong> | Maximum size: <strong>5MB</strong> | Max files: <strong>100</strong>\r\n            </p>\r\n\r\n            \r\n            <input\r\n                type=\"file\"\r\n                id=\"fileInput\"\r\n                accept=\".pdf, .jpg, .jpeg, .png\"\r\n                multiple \r\n                onChange={handleFileUpload}\r\n                style={{ padding: '10px 20px', marginBottom: '20px' }}\r\n            />\r\n\r\n            \r\n            {uploadStatus && (\r\n                <p style={{ color: uploadStatus.startsWith('Error') ? 'red' : 'green', whiteSpace: 'pre-line' }}>\r\n                    {uploadStatus}\r\n                </p>\r\n            )}\r\n\r\n            \r\n            {uploadedFiles.length > 0 && (\r\n                <div style={{ marginTop: '20px', textAlign: 'left', display: 'inline-block' }}>\r\n                    <h3>Uploaded Files:</h3>\r\n                    <ul>\r\n                        {uploadedFiles.map((file, index) => (\r\n                            <li key={index}>\r\n                                {file.name} ({(file.size / 1024).toFixed(2)} KB)\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UploadPage;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}