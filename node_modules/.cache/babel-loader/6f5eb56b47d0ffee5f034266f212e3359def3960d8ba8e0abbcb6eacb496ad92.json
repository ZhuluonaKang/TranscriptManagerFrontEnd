{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\76064\\\\transcript-manager\\\\TranscriptManagerFrontEnd\\\\src\\\\pages\\\\UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { uploadFile } from '../apiServices';\nimport '../styles/UploadPage.css';\nimport '../ReturnButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [uploadedFiles, setUploadedFiles] = useState({\n    valid: [],\n    invalid: []\n  }); // Store valid & invalid files separately\n  const [uploadStatus, setUploadStatus] = useState(''); // Track upload status messages\n  const [progress, setProgress] = useState({}); // Track individual file upload progress\n\n  // File upload restrictions\n  const maxFileSize = 5 * 1024 * 1024; // 5MB limit per file\n  const maxFileCount = 100; // Maximum number of files allowed\n  const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png']; // Allowed file types\n\n  // Handles file selection and validation\n  const handleFileUpload = async event => {\n    const files = Array.from(event.target.files);\n\n    // Enforce max file count\n    if (files.length > maxFileCount) {\n      setUploadStatus(`Error: You can upload up to ${maxFileCount} files at a time.`);\n      return;\n    }\n\n    // Filter out invalid files (wrong format or exceeding size limit)\n    const validFiles = [];\n    const invalidFiles = [];\n    files.forEach(file => {\n      if (!allowedTypes.includes(file.type) || file.size > maxFileSize) {\n        invalidFiles.push({\n          name: file.name,\n          reason: !allowedTypes.includes(file.type) ? 'Unsupported format' : 'File size exceeds 5MB'\n        });\n      } else {\n        validFiles.push(file);\n      }\n    });\n\n    // Store valid and invalid files separately\n    setUploadedFiles({\n      valid: validFiles,\n      invalid: invalidFiles\n    });\n\n    // Display errors for invalid files\n    if (invalidFiles.length > 0) {\n      setUploadStatus(`Error:\\n${invalidFiles.map(file => `${file.name} - ${file.reason}`).join('\\n')}`);\n    }\n\n    // Proceed with uploading valid files if any exist\n    if (validFiles.length > 0) {\n      setUploadStatus('Uploading...');\n\n      // Initialize progress tracking\n      const progressMap = {};\n      validFiles.forEach(file => progressMap[file.name] = 0);\n      setProgress(progressMap);\n\n      // Upload each file sequentially\n      for (const file of validFiles) {\n        await uploadSingleFile(file);\n      }\n      setUploadStatus('All uploads completed!');\n    }\n  };\n\n  // Upload a single file and update progress\n  const uploadSingleFile = async file => {\n    try {\n      await uploadFile(file, percentCompleted => {\n        setProgress(prevProgress => ({\n          ...prevProgress,\n          [file.name]: percentCompleted\n        }));\n      });\n      setProgress(prevProgress => ({\n        ...prevProgress,\n        [file.name]: 100\n      }));\n    } catch (error) {\n      setUploadStatus(`Error uploading ${file.name}: ${error.message}`);\n    }\n  };\n  const handleGoBack = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Transcripts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Allowed formats: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"PDF, JPG, PNG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Maximum size: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"5MB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Max files: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf, .jpg, .jpeg, .png\",\n      multiple: true,\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), uploadedFiles.invalid.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Invalid Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: uploadedFiles.invalid.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, \" - \", file.reason]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), uploadedFiles.valid.length > 0 && uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: uploadStatus.startsWith('Error') ? 'error-text' : 'success-text',\n      children: uploadStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), uploadedFiles.valid.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: uploadedFiles.valid.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, \" (\", (file.size / 1024).toFixed(2), \" KB)\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${progress[file.name] || 0}%`\n              },\n              children: [Math.round(progress[file.name] || 0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-btn\",\n      onClick: handleGoBack,\n      children: \"Return to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadPage, \"x9Sx1046FMaOTio3wnW71LXw4Wg=\", false, function () {\n  return [useNavigate];\n});\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","useNavigate","uploadFile","jsxDEV","_jsxDEV","UploadPage","_s","navigate","uploadedFiles","setUploadedFiles","valid","invalid","uploadStatus","setUploadStatus","progress","setProgress","maxFileSize","maxFileCount","allowedTypes","handleFileUpload","event","files","Array","from","target","length","validFiles","invalidFiles","forEach","file","includes","type","size","push","name","reason","map","join","progressMap","uploadSingleFile","percentCompleted","prevProgress","error","message","handleGoBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","index","startsWith","toFixed","style","width","Math","round","onClick","_c","$RefreshReg$"],"sources":["C:/Users/76064/transcript-manager/TranscriptManagerFrontEnd/src/pages/UploadPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { uploadFile } from '../apiServices';\r\nimport '../styles/UploadPage.css';\r\nimport '../ReturnButton.css'; \r\n\r\n\r\nconst UploadPage = () => {\r\n  const navigate = useNavigate(); \r\n\r\n  const [uploadedFiles, setUploadedFiles] = useState({ valid: [], invalid: [] }); // Store valid & invalid files separately\r\n  const [uploadStatus, setUploadStatus] = useState(''); // Track upload status messages\r\n  const [progress, setProgress] = useState({}); // Track individual file upload progress\r\n\r\n  // File upload restrictions\r\n  const maxFileSize = 5 * 1024 * 1024; // 5MB limit per file\r\n  const maxFileCount = 100; // Maximum number of files allowed\r\n  const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png']; // Allowed file types\r\n\r\n  // Handles file selection and validation\r\n  const handleFileUpload = async (event) => {\r\n    const files = Array.from(event.target.files);\r\n\r\n    // Enforce max file count\r\n    if (files.length > maxFileCount) {\r\n      setUploadStatus(`Error: You can upload up to ${maxFileCount} files at a time.`);\r\n      return;\r\n    }\r\n\r\n    // Filter out invalid files (wrong format or exceeding size limit)\r\n    const validFiles = [];\r\n    const invalidFiles = [];\r\n\r\n    files.forEach((file) => {\r\n      if (!allowedTypes.includes(file.type) || file.size > maxFileSize) {\r\n        invalidFiles.push({\r\n          name: file.name,\r\n          reason: !allowedTypes.includes(file.type)\r\n            ? 'Unsupported format'\r\n            : 'File size exceeds 5MB',\r\n        });\r\n      } else {\r\n        validFiles.push(file);\r\n      }\r\n    });\r\n\r\n    // Store valid and invalid files separately\r\n    setUploadedFiles({ valid: validFiles, invalid: invalidFiles });\r\n\r\n    // Display errors for invalid files\r\n    if (invalidFiles.length > 0) {\r\n      setUploadStatus(\r\n        `Error:\\n${invalidFiles.map((file) => `${file.name} - ${file.reason}`).join('\\n')}`\r\n      );\r\n    }\r\n\r\n    // Proceed with uploading valid files if any exist\r\n    if (validFiles.length > 0) {\r\n      setUploadStatus('Uploading...');\r\n      \r\n      // Initialize progress tracking\r\n      const progressMap = {};\r\n      validFiles.forEach((file) => (progressMap[file.name] = 0));\r\n      setProgress(progressMap);\r\n\r\n      // Upload each file sequentially\r\n      for (const file of validFiles) {\r\n        await uploadSingleFile(file);\r\n      }\r\n\r\n      setUploadStatus('All uploads completed!');\r\n    }\r\n  };\r\n\r\n  // Upload a single file and update progress\r\n  const uploadSingleFile = async (file) => {\r\n    try {\r\n      await uploadFile(file, (percentCompleted) => {\r\n        setProgress((prevProgress) => ({\r\n          ...prevProgress,\r\n          [file.name]: percentCompleted,\r\n        }));\r\n      });\r\n\r\n      setProgress((prevProgress) => ({\r\n        ...prevProgress,\r\n        [file.name]: 100,\r\n      }));\r\n    } catch (error) {\r\n      setUploadStatus(`Error uploading ${file.name}: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    navigate('/'); \r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Upload Transcripts</h1>\r\n      <p>Allowed formats: <strong>PDF, JPG, PNG</strong></p>\r\n      <p>Maximum size: <strong>5MB</strong></p>\r\n      <p>Max files: <strong>100</strong></p>\r\n      \r\n      <input\r\n        type=\"file\"\r\n        accept=\".pdf, .jpg, .jpeg, .png\"\r\n        multiple\r\n        onChange={handleFileUpload}\r\n      />\r\n\r\n      {/* Display errors for any invalid files */}\r\n      {uploadedFiles.invalid.length > 0 && (\r\n        <div className=\"error-text\">\r\n          <p>Invalid Files:</p>\r\n          <ul>\r\n            {uploadedFiles.invalid.map((file, index) => (\r\n              <li key={index}>{file.name} - {file.reason}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      {/* Display upload status for any valid files */}\r\n      {uploadedFiles.valid.length > 0 && uploadStatus && (\r\n        <p className={uploadStatus.startsWith('Error') ? 'error-text' : 'success-text'}>\r\n          {uploadStatus}\r\n        </p>\r\n      )}\r\n\r\n      {/* Progress Bar */}\r\n      {uploadedFiles.valid.length > 0 && (\r\n        <div>\r\n          <ul>\r\n            {uploadedFiles.valid.map((file, index) => (\r\n              <li key={index}>\r\n                {file.name} ({(file.size / 1024).toFixed(2)} KB)\r\n                <div className=\"progress-bar-container\">\r\n                  <div\r\n                    className=\"progress-bar\"\r\n                    style={{ width: `${progress[file.name] || 0}%` }}\r\n                  >\r\n                    {Math.round(progress[file.name] || 0)}%\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {/* ⑧ Return to Home Button */}\r\n      <button className=\"back-btn\" onClick={handleGoBack}>\r\n        Return to Home\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default UploadPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}