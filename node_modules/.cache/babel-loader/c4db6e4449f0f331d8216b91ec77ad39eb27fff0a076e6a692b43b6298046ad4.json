{"ast":null,"code":"import axios from 'axios';\n\n// Set the base URL for API calls. FastAPI runs on port 8000 by default.\nconst API_URL = process.env.REACT_API_URL || 'http://localhost:8000';\nexport const fetchCourseCategories = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/course-categories`);\n    return response.data.course_categories;\n  } catch (error) {\n    console.error(\"Error fetching course categories:\", error);\n    return [];\n  }\n};\n\n/**\r\n * Upload a file to the backend\r\n * @param {File} file - The file to be uploaded\r\n * @returns {Promise<Object>} - The processed file data\r\n */\nexport const uploadFile = async (file, onProgress) => {\n  const formData = new FormData();\n  formData.append('files', file);\n  try {\n    return axios.post(`${API_URL}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: event => {\n        if (onProgress) {\n          const percentCompleted = Math.round(event.loaded * 100 / event.total);\n          onProgress(percentCompleted);\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Search data in the backend\r\n * @param {Object} criteria - The search criteria\r\n * @returns {Promise<Array>} - The search results\r\n */\nexport const searchData = async criteria => {\n  try {\n    console.log(criteria);\n    const response = await axios.post(`${API_URL}/search`, {\n      educator_name: criteria.name,\n      course_category: criteria.courseCategory,\n      education_level: criteria.educationLevel\n    });\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_API_URL","fetchCourseCategories","response","get","data","course_categories","error","console","uploadFile","file","onProgress","formData","FormData","append","post","headers","onUploadProgress","event","percentCompleted","Math","round","loaded","total","searchData","criteria","log","educator_name","name","course_category","courseCategory","education_level","educationLevel"],"sources":["C:/Users/76064/transcript-manager/TranscriptManagerFrontEnd/src/apiServices.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set the base URL for API calls. FastAPI runs on port 8000 by default.\r\nconst API_URL = process.env.REACT_API_URL || 'http://localhost:8000';\r\n\r\n\r\nexport const fetchCourseCategories = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/course-categories`);\r\n    return response.data.course_categories;\r\n  } catch (error) {\r\n    console.error(\"Error fetching course categories:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Upload a file to the backend\r\n * @param {File} file - The file to be uploaded\r\n * @returns {Promise<Object>} - The processed file data\r\n */\r\nexport const uploadFile = async (file, onProgress) => {\r\n  const formData = new FormData();\r\n  formData.append('files', file);\r\n\r\n  try {\r\n    return axios.post(`${API_URL}/upload`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n      onUploadProgress: (event) => {\r\n        if (onProgress) {\r\n          const percentCompleted = Math.round((event.loaded * 100) / event.total);\r\n          onProgress(percentCompleted);\r\n        }\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Search data in the backend\r\n * @param {Object} criteria - The search criteria\r\n * @returns {Promise<Array>} - The search results\r\n */\r\nexport const searchData = async (criteria) => {\r\n  try {\r\n    console.log(criteria);\r\n    const response = await axios.post(`${API_URL}/search`, {\r\n      educator_name: criteria.name,\r\n      course_category: criteria.courseCategory,\r\n      education_level: criteria.educationLevel,\r\n    });\r\n    console.log(response)\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching data:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,aAAa,IAAI,uBAAuB;AAGpE,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,OAAO,oBAAoB,CAAC;IAChE,OAAOK,QAAQ,CAACE,IAAI,CAACC,iBAAiB;EACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO,EAAE;EACX;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,UAAU,KAAK;EACpD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,IAAI,CAAC;EAE9B,IAAI;IACF,OAAOb,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,SAAS,EAAEc,QAAQ,EAAE;MAC/CI,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB,CAAC;MAClDC,gBAAgB,EAAGC,KAAK,IAAK;QAC3B,IAAIP,UAAU,EAAE;UACd,MAAMQ,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,KAAK,CAACI,MAAM,GAAG,GAAG,GAAIJ,KAAK,CAACK,KAAK,CAAC;UACvEZ,UAAU,CAACQ,gBAAgB,CAAC;QAC9B;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACFjB,OAAO,CAACkB,GAAG,CAACD,QAAQ,CAAC;IACrB,MAAMtB,QAAQ,GAAG,MAAMN,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,SAAS,EAAE;MACrD6B,aAAa,EAAEF,QAAQ,CAACG,IAAI;MAC5BC,eAAe,EAAEJ,QAAQ,CAACK,cAAc;MACxCC,eAAe,EAAEN,QAAQ,CAACO;IAC5B,CAAC,CAAC;IACFxB,OAAO,CAACkB,GAAG,CAACvB,QAAQ,CAAC;IACrB,OAAOA,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}