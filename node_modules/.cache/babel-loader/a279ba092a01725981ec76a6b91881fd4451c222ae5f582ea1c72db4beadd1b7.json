{"ast":null,"code":"import axios from 'axios';\n\n// Set the base URL for the API\nconst API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';\n\n/**\r\n * Upload a file to the backend\r\n * @param {File} file - The file to be uploaded\r\n * @returns {Promise<Object>} - The processed file data returned by the backend\r\n */\nexport const uploadFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post(`${API_URL}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Search for data in the backend\r\n * @param {Object} criteria - The search criteria\r\n * @returns {Promise<Array>} - The search results\r\n */\nexport const searchData = async criteria => {\n  try {\n    const response = await axios.post(`${API_URL}/search`, criteria);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching data:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Download data and save it as a CSV file\r\n * @returns {Promise<void>} - Triggers the file download\r\n */\nexport const downloadData = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/download`, {\n      responseType: 'blob'\n    });\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'data.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  } catch (error) {\n    console.error('Error downloading data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","import","meta","env","VITE_API_URL","uploadFile","file","formData","FormData","append","response","post","headers","data","error","console","searchData","criteria","downloadData","get","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild"],"sources":["C:/Users/76064/transcript-manager/src/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set the base URL for the API\r\nconst API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';\r\n\r\n/**\r\n * Upload a file to the backend\r\n * @param {File} file - The file to be uploaded\r\n * @returns {Promise<Object>} - The processed file data returned by the backend\r\n */\r\nexport const uploadFile = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  try {\r\n    const response = await axios.post(`${API_URL}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Search for data in the backend\r\n * @param {Object} criteria - The search criteria\r\n * @returns {Promise<Array>} - The search results\r\n */\r\nexport const searchData = async (criteria) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/search`, criteria);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Download data and save it as a CSV file\r\n * @returns {Promise<void>} - Triggers the file download\r\n */\r\nexport const downloadData = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/download`, { responseType: 'blob' });\r\n    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', 'data.csv');\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  } catch (error) {\r\n    console.error('Error downloading data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,YAAY,IAAI,uBAAuB;;AAEvE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,GAAGX,OAAO,SAAS,EAAEO,QAAQ,EAAE;MAC/DK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,GAAGX,OAAO,SAAS,EAAEiB,QAAQ,CAAC;IAChE,OAAOP,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMX,KAAK,CAACoB,GAAG,CAAC,GAAGnB,OAAO,WAAW,EAAE;MAAEoB,YAAY,EAAE;IAAO,CAAC,CAAC;IACjF,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACf,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;IACjE,MAAMa,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGR,GAAG;IACfK,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;IACzCH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;EACjC,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}