{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\76064\\\\transcript-manager\\\\src\\\\components\\\\ExportButtons.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useMemo } from 'react';\nimport { CSVLink } from 'react-csv';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExportButtons = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  data\n}) => {\n  _s();\n  if (!data || data.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No data available to export.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 44\n  }, this);\n  const headers = useMemo(() => [{\n    label: 'Educator',\n    key: 'educatorname'\n  }, {\n    label: 'Course Name',\n    key: 'course_name'\n  }, {\n    label: 'Credits Earned',\n    key: 'credits_earned'\n  }, {\n    label: 'Grade',\n    key: 'grade'\n  }, {\n    label: 'Category',\n    key: 'should_be_category'\n  }], []);\n  const exportToExcel = useCallback(() => {\n    const worksheet = XLSX.utils.json_to_sheet(data);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Transcripts');\n    XLSX.writeFile(workbook, 'exported_data.xlsx');\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"export-container\",\n    children: [/*#__PURE__*/_jsxDEV(CSVLink, {\n      data: data,\n      headers: headers,\n      filename: \"exported_data.csv\",\n      className: \"export-btn\",\n      children: \"Export as CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"export-btn\",\n      onClick: exportToExcel,\n      children: \"Export as Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}, \"bHU5qXZy8MMJ4aPz7xYv/+aIjDM=\")), \"bHU5qXZy8MMJ4aPz7xYv/+aIjDM=\");\n_c2 = ExportButtons;\nexport default ExportButtons;\nvar _c, _c2;\n$RefreshReg$(_c, \"ExportButtons$React.memo\");\n$RefreshReg$(_c2, \"ExportButtons\");","map":{"version":3,"names":["React","useCallback","useMemo","CSVLink","XLSX","jsxDEV","_jsxDEV","ExportButtons","_s","memo","_c","data","length","children","fileName","_jsxFileName","lineNumber","columnNumber","headers","label","key","exportToExcel","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","writeFile","className","filename","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/76064/transcript-manager/src/components/ExportButtons.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\r\nimport { CSVLink } from 'react-csv';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst ExportButtons = React.memo(({ data }) => {\r\n    if (!data || data.length === 0) return <p>No data available to export.</p>;\r\n\r\n    const headers = useMemo(() => [\r\n        { label: 'Educator', key: 'educatorname' },\r\n        { label: 'Course Name', key: 'course_name' },\r\n        { label: 'Credits Earned', key: 'credits_earned' },\r\n        { label: 'Grade', key: 'grade' },\r\n        { label: 'Category', key: 'should_be_category' }\r\n    ], []);\r\n\r\n    const exportToExcel = useCallback(() => {\r\n        const worksheet = XLSX.utils.json_to_sheet(data);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Transcripts');\r\n        XLSX.writeFile(workbook, 'exported_data.xlsx');\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"export-container\">\r\n            <CSVLink data={data} headers={headers} filename=\"exported_data.csv\" className=\"export-btn\">\r\n                Export as CSV\r\n            </CSVLink>\r\n            <button className=\"export-btn\" onClick={exportToExcel}>Export as Excel</button>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ExportButtons;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AACnD,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,gBAAAC,EAAA,cAAGR,KAAK,CAACS,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,CAAC;EAAEG;AAAK,CAAC,KAAK;EAAAH,EAAA;EAC3C,IAAI,CAACG,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE,oBAAON,OAAA;IAAAO,QAAA,EAAG;EAA4B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE1E,MAAMC,OAAO,GAAGhB,OAAO,CAAC,MAAM,CAC1B;IAAEiB,KAAK,EAAE,UAAU;IAAEC,GAAG,EAAE;EAAe,CAAC,EAC1C;IAAED,KAAK,EAAE,aAAa;IAAEC,GAAG,EAAE;EAAc,CAAC,EAC5C;IAAED,KAAK,EAAE,gBAAgB;IAAEC,GAAG,EAAE;EAAiB,CAAC,EAClD;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,UAAU;IAAEC,GAAG,EAAE;EAAqB,CAAC,CACnD,EAAE,EAAE,CAAC;EAEN,MAAMC,aAAa,GAAGpB,WAAW,CAAC,MAAM;IACpC,MAAMqB,SAAS,GAAGlB,IAAI,CAACmB,KAAK,CAACC,aAAa,CAACb,IAAI,CAAC;IAChD,MAAMc,QAAQ,GAAGrB,IAAI,CAACmB,KAAK,CAACG,QAAQ,CAAC,CAAC;IACtCtB,IAAI,CAACmB,KAAK,CAACI,iBAAiB,CAACF,QAAQ,EAAEH,SAAS,EAAE,aAAa,CAAC;IAChElB,IAAI,CAACwB,SAAS,CAACH,QAAQ,EAAE,oBAAoB,CAAC;EAClD,CAAC,EAAE,CAACd,IAAI,CAAC,CAAC;EAEV,oBACIL,OAAA;IAAKuB,SAAS,EAAC,kBAAkB;IAAAhB,QAAA,gBAC7BP,OAAA,CAACH,OAAO;MAACQ,IAAI,EAAEA,IAAK;MAACO,OAAO,EAAEA,OAAQ;MAACY,QAAQ,EAAC,mBAAmB;MAACD,SAAS,EAAC,YAAY;MAAAhB,QAAA,EAAC;IAE3F;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACVX,OAAA;MAAQuB,SAAS,EAAC,YAAY;MAACE,OAAO,EAAEV,aAAc;MAAAR,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9E,CAAC;AAEd,CAAC,kCAAC;AAACe,GAAA,GA1BGzB,aAAa;AA4BnB,eAAeA,aAAa;AAAC,IAAAG,EAAA,EAAAsB,GAAA;AAAAC,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}