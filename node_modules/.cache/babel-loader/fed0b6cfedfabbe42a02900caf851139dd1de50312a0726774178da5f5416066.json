{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const fetchExistingData = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/data`);\n    return response.data; // 返回原始数据\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const querySearchData = async criteria => {\n  try {\n    const response = await axios.post(`${API_URL}/data/query`, criteria);\n    return response.data;\n  } catch (error) {\n    console.error('Error querying data:', error);\n    return [];\n  }\n};\nexport const importNewTranscripts = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/process-data`);\n    return response.data;\n  } catch (error) {\n    console.error('Error importing transcripts:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","fetchExistingData","response","get","data","error","console","querySearchData","criteria","post","importNewTranscripts"],"sources":["C:/Users/76064/transcript-manager/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const fetchExistingData = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/data`);\r\n        return response.data; // 返回原始数据\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const querySearchData = async (criteria) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/data/query`, criteria);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error querying data:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const importNewTranscripts = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/process-data`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error importing transcripts:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,OAAO,OAAO,CAAC;IACnD,OAAOK,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,EAAE;EACb;AACJ,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMN,KAAK,CAACa,IAAI,CAAC,GAAGZ,OAAO,aAAa,EAAEW,QAAQ,CAAC;IACpE,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,EAAE;EACb;AACJ,CAAC;AAED,OAAO,MAAMK,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,OAAO,eAAe,CAAC;IAC3D,OAAOK,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACb;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}